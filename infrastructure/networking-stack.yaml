# infrastructure/networking-stack.yaml

AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Networking Stack: Creates a VPC, public and private subnets,
  Internet Gateway, Route Tables, and Security Groups with project-specific prefixes.

Parameters:
  ProjectName:
    Type: String
    Description: "Project name to prefix all resource names and identifiers"
    AllowedPattern: "^[a-zA-Z0-9-]+$"
    ConstraintDescription: "Project name can only contain alphanumeric characters and hyphens."

  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC

  PublicSubnetCIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the Public Subnet

  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for the Public Subnet

  PrivateSubnetCIDR:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for the Private Subnet

  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.4.0/24
    Description: CIDR block for the Private Subnet

  DBPort:
    Type: Number
    Default: 3306
    Description: Port for the RDS MySQL Database

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-IGW"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PublicSubnet"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PublicSubnet2"


  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PrivateSubnet"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PrivateSubnet2"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PublicRouteTable"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Add another Route Table Association for PublicSubnet2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable


  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Allows all incoming traffic on port 80
      Egress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0  # Allows all outgoing traffic
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-ECSSecurityGroup"

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp  # Allow MySQL from ECS tasks
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          SourceSecurityGroupId: !Ref ECSSecurityGroup
        - IpProtocol: tcp  # Allow MySQL from anywhere (for testing)
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          CidrIp: 0.0.0.0/0  # Restrict this for production
      Egress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-RDSSecurityGroup"

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${ProjectName}-NetworkingVPCId"

  PublicSubnetId:
    Description: Public Subnet ID
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub "${ProjectName}-NetworkingPublicSubnetId"

  PublicSubnet2Id:
    Description: Public Subnet ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${ProjectName}-NetworkingPublicSubnet2Id"

  PrivateSubnetId:
    Description: Private Subnet ID
    Value: !Ref PrivateSubnet
    Export:
      Name: !Sub "${ProjectName}-NetworkingPrivateSubnetId"

  PrivateSubnet2Id:
    Description: Private Subnet ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${ProjectName}-NetworkingPrivateSubnet2Id"

  ECSSecurityGroupId:
    Description: ECS Security Group ID
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Sub "${ProjectName}-NetworkingECSSecurityGroupId"

  RDSSecurityGroupId:
    Description: RDS Security Group ID
    Value: !Ref RDSSecurityGroup
    Export:
      Name: !Sub "${ProjectName}-NetworkingRDSSecurityGroupId"
